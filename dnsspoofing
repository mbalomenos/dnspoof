import os
import subprocess
import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog, ttk
import netifaces
import nmap
import threading
import getpass

class DNS_Spoofing_Tool:
    def __init__(self, root):
        self.root = root
        self.root.title("DNS Spoofing Tool")

        # Create tabs
        self.tabs = ttk.Notebook(root)
        self.tabs.pack(expand=1, fill="both")

        # Add tabs
        self.create_dns_tab()
        self.create_nmap_tab()

    def create_dns_tab(self):
        self.dns_tab = ttk.Frame(self.tabs)
        self.tabs.add(self.dns_tab, text="DNS Spoofing")

        # Label and entry for Parrot Linux IP
        self.parrot_ip_label = tk.Label(self.dns_tab, text="Your IP:")
        self.parrot_ip_label.grid(row=0, column=0, padx=10, pady=5)
        self.parrot_ip_entry = tk.Entry(self.dns_tab)
        self.parrot_ip_entry.grid(row=0, column=1, padx=10, pady=5)
        self.tooltip(self.parrot_ip_entry, "Your Parrot Linux IP address.")

        # Label and entry for target URL
        self.target_url_label = tk.Label(self.dns_tab, text="Target URL:")
        self.target_url_label.grid(row=1, column=0, padx=10, pady=5)
        self.target_url_entry = tk.Entry(self.dns_tab)
        self.target_url_entry.grid(row=1, column=1, padx=10, pady=5)
        self.tooltip(self.target_url_entry, "Enter the URL of the website you want to clone.")

        # Button to scan for available target IPs
        self.scan_button = tk.Button(self.dns_tab, text="Scan for Target IPs", command=self.scan_ips)
        self.scan_button.grid(row=0, column=2, padx=10, pady=5)
        self.tooltip(self.scan_button, "Scan for available target IP addresses in the network.")

        # Dropdown for network interface
        self.interface_label = tk.Label(self.dns_tab, text="Network Interface:")
        self.interface_label.grid(row=2, column=0, padx=10, pady=5)
        self.interfaces = netifaces.interfaces()
        self.interface_var = tk.StringVar(self.dns_tab)
        self.interface_var.set(self.interfaces[0])  # Set default value
        self.interface_dropdown = tk.OptionMenu(self.dns_tab, self.interface_var, *self.interfaces)
        self.interface_dropdown.grid(row=2, column=1, padx=10, pady=5)
        self.tooltip(self.interface_dropdown, "Select the network interface to use for DNS spoofing.")

        # Label to display available target IPs
        self.target_ips_label = tk.Label(self.dns_tab, text="Available Target IPs:")
        self.target_ips_label.grid(row=3, column=0, padx=10, pady=5)
        self.target_ips_text = tk.Text(self.dns_tab, height=5, width=50)
        self.target_ips_text.grid(row=3, column=1, columnspan=2, padx=10, pady=5)
        self.tooltip(self.target_ips_text, "List of available target IP addresses found in the network.")

        # Button to start DNS spoofing
        self.start_button = tk.Button(self.dns_tab, text="Start DNS Spoofing", command=self.start_dns_spoofing)
        self.start_button.grid(row=5, column=0, columnspan=2, padx=10, pady=5)
        self.tooltip(self.start_button, "Start DNS spoofing with the specified configuration.")

        # Get and display Parrot Linux IP
        self.parrot_ip_entry.insert(0, self.get_parrot_ip())

    def create_nmap_tab(self):
        self.nmap_tab = ttk.Frame(self.tabs)
        self.tabs.add(self.nmap_tab, text="Nmap Commands")

        # Nmap commands and descriptions
        nmap_commands = {
            "nmap 192.168.1.1": "Scan a single IP",
            "nmap 192.168.1.1 192.168.2.1": "Scan specific IPs",
            # Add more commands and descriptions here
        }

        # Display Nmap commands and descriptions
        for i, (command, description) in enumerate(nmap_commands.items(), start=1):
            label = tk.Label(self.nmap_tab, text=f"{i}. {command}: {description}")
            label.grid(row=i, column=0, padx=10, pady=5, sticky="w")

        # Input field to execute Nmap command by number
        self.nmap_input_label = tk.Label(self.nmap_tab, text="Enter command number:")
        self.nmap_input_label.grid(row=len(nmap_commands)+1, column=0, padx=10, pady=5, sticky="w")
        self.nmap_input_entry = tk.Entry(self.nmap_tab)
        self.nmap_input_entry.grid(row=len(nmap_commands)+1, column=1, padx=10, pady=5)
        self.tooltip(self.nmap_input_entry, "Enter the number of the command you want to execute.")

        # Button to execute selected Nmap command
        self.execute_button = tk.Button(self.nmap_tab, text="Execute", command=self.execute_nmap_command)
        self.execute_button.grid(row=len(nmap_commands)+1, column=2, padx=10, pady=5)

    def tooltip(self, widget, text):
        widget.bind("<Enter>", lambda event, text=text: self.show_tooltip(event, text))
        widget.bind("<Leave>", self.hide_tooltip)

    def show_tooltip(self, event, text):
        tooltip = tk.Toplevel(event.widget)
        x, y, _, _ = event.widget.bbox("insert")
        x_root, y_root = event.widget.winfo_rootx() + x + 25, event.widget.winfo_rooty() + y + 20
        tooltip.wm_overrideredirect(True)
        tooltip.wm_geometry(f"+{x_root}+{y_root}")
        label = tk.Label(tooltip, text=text, background="#ffffe0", relief="solid", borderwidth=1)
        label.pack(ipadx=1)

    def hide_tooltip(self, event):
        event.widget.tk_focusNext().focus()
        event.widget.focus_set()

    def get_parrot_ip(self):
        # Get IP address of the Parrot Linux machine
        for interface in netifaces.interfaces():
            if interface != "lo":
                return netifaces.ifaddresses(interface)[netifaces.AF_INET][0]['addr']

    def scan_ips(self):
        pass

    def start_dns_spoofing(self):
        pass

    def execute_nmap_command(self):
        pass

if __name__ == "__main__":
    root = tk.Tk()
    dns_spoofing_tool = DNS_Spoofing_Tool(root)
    root.mainloop()
